



查看当前目录里的文件 ===》 ll
查看当前所在目录路径 ===》 pwd
创建文件夹===> mkdir "所要创建的文件名"
初始化文件 ===> git init
查看隐藏文件=== >   ls -la
设置签名
形式   ： 
用户名：aaa 
Email:aaaaaa@qweqw.com
作用：区分不同开发人员的身份
辨析：这里设置的签名和登录远程库（代码托管中心）的账号、密码没有任何关系
命令：
项目级别/仓库级别： 仅在当前本地库范围内有效
git config  user.name ruocheng
git cinfig user.email 2629552486@QQ.COM
信息保存的位置： ./.git/config  

系统用户级别：登录当前操作系统的用户范围
git config --global  user.name ruocheng
git cinfig --global user.email 2629552486@QQ.COM
优先级：
就近原则：项目级别优先于系统用户级别，二者都有时采用项目级别的签名
如果只有系统用户级别的签名，就以系统用户级别的签名为准
二者都没有是不允许的 	
查看状态  git status   
将文件提交到暂存区  git add 文件名
将文件从暂存区提交到本地库 git commit  文件名 或者 git commit -m "备注信息" 文件名
版本查看
 git log
 git log --pretty=oneline
 git log --oneline
 git reflog

多屏显示控制方式
空格向下翻页
b向上翻页
q退出
版本移动
 基于索引值【推荐】
 git reset --hard 索引值




只能往后退
使用^符号 ： git reset HEAD^
使用~符号：只能后退
git reset --hard HEAD~N 
    注：表示后退n步





reset命令的三个参数对比
（git help 具体命令 ）打开对应api
--soft参数：仅仅在本地库移动HEAD指针
--mixed参数：在本地库移动HEAD指针，重置暂存区
--hard参数：在本地库移动HEAD指针，重置暂存区，重置工作区

永久删除文件后如何找回
前提：删除前，文件存在时的状态提交到了本地库
操作：Git reset --hard[指针位置] 
 	删除操作已经提交到了本地库：指针位置指向历史记录
        删除操作尚未提交到本地库：指针位置使用HEAD
比较文件差异
git diff [文件名]
      将工作区的文件和暂存区进行比较
git diff [本地库中历史版本][文件名]
        将工作区中的文件和本地库历史记录比较
不带文件名比较多个文件
分支管理
什么是分支？
在版本控制过程中，使用多条线同时推进多个任务

分支的好处？
同时并行推进多个功能的开发，提高开发效率
各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。
  		失败的分支删除重新开始即可
分支操作
创建分支
git branch [分支名]

查看分支
git branch -v

切换分支 
git checkout [分支名]

合并分支
第一步：切换到接受修改的分支（被合并，增加新的内容）上
    git checkout [分支名]
第二步：执行merge命令
    git merge [有新内容 分支名]

解决冲突
冲突的表现



冲突的解决
    第一步：编辑文件，删除特殊符号
    第二步：把文件修改到满意的程度，保存退出
    第三步：git add[文件名]
    第四步：git commit -m "日志信息"
        注意：此时commit 一定不能带具体文件名

git基本原理
 哈希
哈希是一个系列的加密算法，各个不同的哈希算法虽然加密强度不同，但是有以下几个共同点：
不管输入数据的数据量有多大，输入同一个哈希算法，得到的加密结果长度固定。
哈希算法确定，输入数据确定，输出数据能够保证不变
哈希算法确定，输入数据有变化，输出数据一定有变化，而且通常变化很大
哈希算法不可逆
Git底层采用的是SHA-1算法。
哈希算法可以被用来验证文件。原理如下图所示：


